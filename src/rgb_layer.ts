// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: rgb_layer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ErrorConditions, errorConditionsFromJSON, errorConditionsToJSON } from "./meta";

export const protobufPackage = "zmk.rgb_layer";

/** RGB Layer subsystem messages for per-layer RGB control */
export interface RgbLayerColor {
  /** Hue (0-360) */
  h: number;
  /** Saturation (0-100) */
  s: number;
  /** Brightness (0-100) */
  b: number;
}

export interface RgbLayerConfig {
  color:
    | RgbLayerColor
    | undefined;
  /** RGB effect ID (0-3: solid, breathe, spectrum, swirl) */
  effect: number;
  /** Brightness (0-100) */
  brightness: number;
  /** Whether RGB is enabled for this layer */
  enabled: boolean;
}

export interface GetInfoRequest {
}

export interface GetInfoResponse {
  /** Whether RGB underglow hardware is available */
  hasRgbUnderglow: boolean;
}

export interface GetGlobalRgbRequest {
}

export interface GetGlobalRgbResponse {
  /** Global RGB configuration */
  config: RgbLayerConfig | undefined;
}

export interface GetLayerRgbRequest {
  /** Layer ID to query (0-based) */
  layerId: number;
}

export interface GetLayerRgbResponse {
  /** Current RGB config for the layer (optional if no custom config) */
  config?: RgbLayerConfig | undefined;
}

export interface SetLayerRgbRequest {
  /** Layer ID to set (0-based) */
  layerId: number;
  /** RGB configuration to apply */
  config: RgbLayerConfig | undefined;
}

export interface SetLayerRgbResponse {
}

export interface ClearLayerRgbRequest {
  /** Layer ID to clear (0-based) */
  layerId: number;
}

export interface ClearLayerRgbResponse {
}

export interface Request {
  getInfo?: GetInfoRequest | undefined;
  getGlobalRgb?: GetGlobalRgbRequest | undefined;
  getLayerRgb?: GetLayerRgbRequest | undefined;
  setLayerRgb?: SetLayerRgbRequest | undefined;
  clearLayerRgb?: ClearLayerRgbRequest | undefined;
}

export interface Response {
  getInfo?: GetInfoResponse | undefined;
  getGlobalRgb?: GetGlobalRgbResponse | undefined;
  getLayerRgb?: GetLayerRgbResponse | undefined;
  setLayerRgb?: SetLayerRgbResponse | undefined;
  clearLayerRgb?: ClearLayerRgbResponse | undefined;
  error?: ErrorConditions | undefined;
}

function createBaseRgbLayerColor(): RgbLayerColor {
  return { h: 0, s: 0, b: 0 };
}

export const RgbLayerColor: MessageFns<RgbLayerColor> = {
  encode(message: RgbLayerColor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.h !== 0) {
      writer.uint32(8).uint32(message.h);
    }
    if (message.s !== 0) {
      writer.uint32(16).uint32(message.s);
    }
    if (message.b !== 0) {
      writer.uint32(24).uint32(message.b);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RgbLayerColor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRgbLayerColor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.h = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.s = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.b = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RgbLayerColor {
    return {
      h: isSet(object.h) ? globalThis.Number(object.h) : 0,
      s: isSet(object.s) ? globalThis.Number(object.s) : 0,
      b: isSet(object.b) ? globalThis.Number(object.b) : 0,
    };
  },

  toJSON(message: RgbLayerColor): unknown {
    const obj: any = {};
    if (message.h !== 0) {
      obj.h = Math.round(message.h);
    }
    if (message.s !== 0) {
      obj.s = Math.round(message.s);
    }
    if (message.b !== 0) {
      obj.b = Math.round(message.b);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RgbLayerColor>, I>>(base?: I): RgbLayerColor {
    return RgbLayerColor.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RgbLayerColor>, I>>(object: I): RgbLayerColor {
    const message = createBaseRgbLayerColor();
    message.h = object.h ?? 0;
    message.s = object.s ?? 0;
    message.b = object.b ?? 0;
    return message;
  },
};

function createBaseRgbLayerConfig(): RgbLayerConfig {
  return { color: undefined, effect: 0, brightness: 0, enabled: false };
}

export const RgbLayerConfig: MessageFns<RgbLayerConfig> = {
  encode(message: RgbLayerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== undefined) {
      RgbLayerColor.encode(message.color, writer.uint32(10).fork()).join();
    }
    if (message.effect !== 0) {
      writer.uint32(16).uint32(message.effect);
    }
    if (message.brightness !== 0) {
      writer.uint32(24).uint32(message.brightness);
    }
    if (message.enabled !== false) {
      writer.uint32(32).bool(message.enabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RgbLayerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRgbLayerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.color = RgbLayerColor.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.effect = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.brightness = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RgbLayerConfig {
    return {
      color: isSet(object.color) ? RgbLayerColor.fromJSON(object.color) : undefined,
      effect: isSet(object.effect) ? globalThis.Number(object.effect) : 0,
      brightness: isSet(object.brightness) ? globalThis.Number(object.brightness) : 0,
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
    };
  },

  toJSON(message: RgbLayerConfig): unknown {
    const obj: any = {};
    if (message.color !== undefined) {
      obj.color = RgbLayerColor.toJSON(message.color);
    }
    if (message.effect !== 0) {
      obj.effect = Math.round(message.effect);
    }
    if (message.brightness !== 0) {
      obj.brightness = Math.round(message.brightness);
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RgbLayerConfig>, I>>(base?: I): RgbLayerConfig {
    return RgbLayerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RgbLayerConfig>, I>>(object: I): RgbLayerConfig {
    const message = createBaseRgbLayerConfig();
    message.color = (object.color !== undefined && object.color !== null)
      ? RgbLayerColor.fromPartial(object.color)
      : undefined;
    message.effect = object.effect ?? 0;
    message.brightness = object.brightness ?? 0;
    message.enabled = object.enabled ?? false;
    return message;
  },
};

function createBaseGetInfoRequest(): GetInfoRequest {
  return {};
}

export const GetInfoRequest: MessageFns<GetInfoRequest> = {
  encode(_: GetInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetInfoRequest {
    return {};
  },

  toJSON(_: GetInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoRequest>, I>>(base?: I): GetInfoRequest {
    return GetInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoRequest>, I>>(_: I): GetInfoRequest {
    const message = createBaseGetInfoRequest();
    return message;
  },
};

function createBaseGetInfoResponse(): GetInfoResponse {
  return { hasRgbUnderglow: false };
}

export const GetInfoResponse: MessageFns<GetInfoResponse> = {
  encode(message: GetInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hasRgbUnderglow !== false) {
      writer.uint32(8).bool(message.hasRgbUnderglow);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hasRgbUnderglow = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInfoResponse {
    return { hasRgbUnderglow: isSet(object.hasRgbUnderglow) ? globalThis.Boolean(object.hasRgbUnderglow) : false };
  },

  toJSON(message: GetInfoResponse): unknown {
    const obj: any = {};
    if (message.hasRgbUnderglow !== false) {
      obj.hasRgbUnderglow = message.hasRgbUnderglow;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoResponse>, I>>(base?: I): GetInfoResponse {
    return GetInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoResponse>, I>>(object: I): GetInfoResponse {
    const message = createBaseGetInfoResponse();
    message.hasRgbUnderglow = object.hasRgbUnderglow ?? false;
    return message;
  },
};

function createBaseGetGlobalRgbRequest(): GetGlobalRgbRequest {
  return {};
}

export const GetGlobalRgbRequest: MessageFns<GetGlobalRgbRequest> = {
  encode(_: GetGlobalRgbRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGlobalRgbRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGlobalRgbRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetGlobalRgbRequest {
    return {};
  },

  toJSON(_: GetGlobalRgbRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGlobalRgbRequest>, I>>(base?: I): GetGlobalRgbRequest {
    return GetGlobalRgbRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGlobalRgbRequest>, I>>(_: I): GetGlobalRgbRequest {
    const message = createBaseGetGlobalRgbRequest();
    return message;
  },
};

function createBaseGetGlobalRgbResponse(): GetGlobalRgbResponse {
  return { config: undefined };
}

export const GetGlobalRgbResponse: MessageFns<GetGlobalRgbResponse> = {
  encode(message: GetGlobalRgbResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      RgbLayerConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetGlobalRgbResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetGlobalRgbResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = RgbLayerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetGlobalRgbResponse {
    return { config: isSet(object.config) ? RgbLayerConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetGlobalRgbResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = RgbLayerConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetGlobalRgbResponse>, I>>(base?: I): GetGlobalRgbResponse {
    return GetGlobalRgbResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetGlobalRgbResponse>, I>>(object: I): GetGlobalRgbResponse {
    const message = createBaseGetGlobalRgbResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? RgbLayerConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseGetLayerRgbRequest(): GetLayerRgbRequest {
  return { layerId: 0 };
}

export const GetLayerRgbRequest: MessageFns<GetLayerRgbRequest> = {
  encode(message: GetLayerRgbRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLayerRgbRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLayerRgbRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLayerRgbRequest {
    return { layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0 };
  },

  toJSON(message: GetLayerRgbRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLayerRgbRequest>, I>>(base?: I): GetLayerRgbRequest {
    return GetLayerRgbRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLayerRgbRequest>, I>>(object: I): GetLayerRgbRequest {
    const message = createBaseGetLayerRgbRequest();
    message.layerId = object.layerId ?? 0;
    return message;
  },
};

function createBaseGetLayerRgbResponse(): GetLayerRgbResponse {
  return { config: undefined };
}

export const GetLayerRgbResponse: MessageFns<GetLayerRgbResponse> = {
  encode(message: GetLayerRgbResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      RgbLayerConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLayerRgbResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLayerRgbResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = RgbLayerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLayerRgbResponse {
    return { config: isSet(object.config) ? RgbLayerConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: GetLayerRgbResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = RgbLayerConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLayerRgbResponse>, I>>(base?: I): GetLayerRgbResponse {
    return GetLayerRgbResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLayerRgbResponse>, I>>(object: I): GetLayerRgbResponse {
    const message = createBaseGetLayerRgbResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? RgbLayerConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseSetLayerRgbRequest(): SetLayerRgbRequest {
  return { layerId: 0, config: undefined };
}

export const SetLayerRgbRequest: MessageFns<SetLayerRgbRequest> = {
  encode(message: SetLayerRgbRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    if (message.config !== undefined) {
      RgbLayerConfig.encode(message.config, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetLayerRgbRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetLayerRgbRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = RgbLayerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetLayerRgbRequest {
    return {
      layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0,
      config: isSet(object.config) ? RgbLayerConfig.fromJSON(object.config) : undefined,
    };
  },

  toJSON(message: SetLayerRgbRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    if (message.config !== undefined) {
      obj.config = RgbLayerConfig.toJSON(message.config);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetLayerRgbRequest>, I>>(base?: I): SetLayerRgbRequest {
    return SetLayerRgbRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetLayerRgbRequest>, I>>(object: I): SetLayerRgbRequest {
    const message = createBaseSetLayerRgbRequest();
    message.layerId = object.layerId ?? 0;
    message.config = (object.config !== undefined && object.config !== null)
      ? RgbLayerConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseSetLayerRgbResponse(): SetLayerRgbResponse {
  return {};
}

export const SetLayerRgbResponse: MessageFns<SetLayerRgbResponse> = {
  encode(_: SetLayerRgbResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetLayerRgbResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetLayerRgbResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetLayerRgbResponse {
    return {};
  },

  toJSON(_: SetLayerRgbResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SetLayerRgbResponse>, I>>(base?: I): SetLayerRgbResponse {
    return SetLayerRgbResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetLayerRgbResponse>, I>>(_: I): SetLayerRgbResponse {
    const message = createBaseSetLayerRgbResponse();
    return message;
  },
};

function createBaseClearLayerRgbRequest(): ClearLayerRgbRequest {
  return { layerId: 0 };
}

export const ClearLayerRgbRequest: MessageFns<ClearLayerRgbRequest> = {
  encode(message: ClearLayerRgbRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearLayerRgbRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearLayerRgbRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearLayerRgbRequest {
    return { layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0 };
  },

  toJSON(message: ClearLayerRgbRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearLayerRgbRequest>, I>>(base?: I): ClearLayerRgbRequest {
    return ClearLayerRgbRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearLayerRgbRequest>, I>>(object: I): ClearLayerRgbRequest {
    const message = createBaseClearLayerRgbRequest();
    message.layerId = object.layerId ?? 0;
    return message;
  },
};

function createBaseClearLayerRgbResponse(): ClearLayerRgbResponse {
  return {};
}

export const ClearLayerRgbResponse: MessageFns<ClearLayerRgbResponse> = {
  encode(_: ClearLayerRgbResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearLayerRgbResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearLayerRgbResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ClearLayerRgbResponse {
    return {};
  },

  toJSON(_: ClearLayerRgbResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearLayerRgbResponse>, I>>(base?: I): ClearLayerRgbResponse {
    return ClearLayerRgbResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearLayerRgbResponse>, I>>(_: I): ClearLayerRgbResponse {
    const message = createBaseClearLayerRgbResponse();
    return message;
  },
};

function createBaseRequest(): Request {
  return {
    getInfo: undefined,
    getGlobalRgb: undefined,
    getLayerRgb: undefined,
    setLayerRgb: undefined,
    clearLayerRgb: undefined,
  };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getInfo !== undefined) {
      GetInfoRequest.encode(message.getInfo, writer.uint32(10).fork()).join();
    }
    if (message.getGlobalRgb !== undefined) {
      GetGlobalRgbRequest.encode(message.getGlobalRgb, writer.uint32(18).fork()).join();
    }
    if (message.getLayerRgb !== undefined) {
      GetLayerRgbRequest.encode(message.getLayerRgb, writer.uint32(26).fork()).join();
    }
    if (message.setLayerRgb !== undefined) {
      SetLayerRgbRequest.encode(message.setLayerRgb, writer.uint32(34).fork()).join();
    }
    if (message.clearLayerRgb !== undefined) {
      ClearLayerRgbRequest.encode(message.clearLayerRgb, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.getInfo = GetInfoRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getGlobalRgb = GetGlobalRgbRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.getLayerRgb = GetLayerRgbRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.setLayerRgb = SetLayerRgbRequest.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clearLayerRgb = ClearLayerRgbRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      getInfo: isSet(object.getInfo) ? GetInfoRequest.fromJSON(object.getInfo) : undefined,
      getGlobalRgb: isSet(object.getGlobalRgb) ? GetGlobalRgbRequest.fromJSON(object.getGlobalRgb) : undefined,
      getLayerRgb: isSet(object.getLayerRgb) ? GetLayerRgbRequest.fromJSON(object.getLayerRgb) : undefined,
      setLayerRgb: isSet(object.setLayerRgb) ? SetLayerRgbRequest.fromJSON(object.setLayerRgb) : undefined,
      clearLayerRgb: isSet(object.clearLayerRgb) ? ClearLayerRgbRequest.fromJSON(object.clearLayerRgb) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.getInfo !== undefined) {
      obj.getInfo = GetInfoRequest.toJSON(message.getInfo);
    }
    if (message.getGlobalRgb !== undefined) {
      obj.getGlobalRgb = GetGlobalRgbRequest.toJSON(message.getGlobalRgb);
    }
    if (message.getLayerRgb !== undefined) {
      obj.getLayerRgb = GetLayerRgbRequest.toJSON(message.getLayerRgb);
    }
    if (message.setLayerRgb !== undefined) {
      obj.setLayerRgb = SetLayerRgbRequest.toJSON(message.setLayerRgb);
    }
    if (message.clearLayerRgb !== undefined) {
      obj.clearLayerRgb = ClearLayerRgbRequest.toJSON(message.clearLayerRgb);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.getInfo = (object.getInfo !== undefined && object.getInfo !== null)
      ? GetInfoRequest.fromPartial(object.getInfo)
      : undefined;
    message.getGlobalRgb = (object.getGlobalRgb !== undefined && object.getGlobalRgb !== null)
      ? GetGlobalRgbRequest.fromPartial(object.getGlobalRgb)
      : undefined;
    message.getLayerRgb = (object.getLayerRgb !== undefined && object.getLayerRgb !== null)
      ? GetLayerRgbRequest.fromPartial(object.getLayerRgb)
      : undefined;
    message.setLayerRgb = (object.setLayerRgb !== undefined && object.setLayerRgb !== null)
      ? SetLayerRgbRequest.fromPartial(object.setLayerRgb)
      : undefined;
    message.clearLayerRgb = (object.clearLayerRgb !== undefined && object.clearLayerRgb !== null)
      ? ClearLayerRgbRequest.fromPartial(object.clearLayerRgb)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return {
    getInfo: undefined,
    getGlobalRgb: undefined,
    getLayerRgb: undefined,
    setLayerRgb: undefined,
    clearLayerRgb: undefined,
    error: undefined,
  };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getInfo !== undefined) {
      GetInfoResponse.encode(message.getInfo, writer.uint32(10).fork()).join();
    }
    if (message.getGlobalRgb !== undefined) {
      GetGlobalRgbResponse.encode(message.getGlobalRgb, writer.uint32(18).fork()).join();
    }
    if (message.getLayerRgb !== undefined) {
      GetLayerRgbResponse.encode(message.getLayerRgb, writer.uint32(26).fork()).join();
    }
    if (message.setLayerRgb !== undefined) {
      SetLayerRgbResponse.encode(message.setLayerRgb, writer.uint32(34).fork()).join();
    }
    if (message.clearLayerRgb !== undefined) {
      ClearLayerRgbResponse.encode(message.clearLayerRgb, writer.uint32(42).fork()).join();
    }
    if (message.error !== undefined) {
      writer.uint32(48).int32(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.getInfo = GetInfoResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getGlobalRgb = GetGlobalRgbResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.getLayerRgb = GetLayerRgbResponse.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.setLayerRgb = SetLayerRgbResponse.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.clearLayerRgb = ClearLayerRgbResponse.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.error = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      getInfo: isSet(object.getInfo) ? GetInfoResponse.fromJSON(object.getInfo) : undefined,
      getGlobalRgb: isSet(object.getGlobalRgb) ? GetGlobalRgbResponse.fromJSON(object.getGlobalRgb) : undefined,
      getLayerRgb: isSet(object.getLayerRgb) ? GetLayerRgbResponse.fromJSON(object.getLayerRgb) : undefined,
      setLayerRgb: isSet(object.setLayerRgb) ? SetLayerRgbResponse.fromJSON(object.setLayerRgb) : undefined,
      clearLayerRgb: isSet(object.clearLayerRgb) ? ClearLayerRgbResponse.fromJSON(object.clearLayerRgb) : undefined,
      error: isSet(object.error) ? errorConditionsFromJSON(object.error) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.getInfo !== undefined) {
      obj.getInfo = GetInfoResponse.toJSON(message.getInfo);
    }
    if (message.getGlobalRgb !== undefined) {
      obj.getGlobalRgb = GetGlobalRgbResponse.toJSON(message.getGlobalRgb);
    }
    if (message.getLayerRgb !== undefined) {
      obj.getLayerRgb = GetLayerRgbResponse.toJSON(message.getLayerRgb);
    }
    if (message.setLayerRgb !== undefined) {
      obj.setLayerRgb = SetLayerRgbResponse.toJSON(message.setLayerRgb);
    }
    if (message.clearLayerRgb !== undefined) {
      obj.clearLayerRgb = ClearLayerRgbResponse.toJSON(message.clearLayerRgb);
    }
    if (message.error !== undefined) {
      obj.error = errorConditionsToJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.getInfo = (object.getInfo !== undefined && object.getInfo !== null)
      ? GetInfoResponse.fromPartial(object.getInfo)
      : undefined;
    message.getGlobalRgb = (object.getGlobalRgb !== undefined && object.getGlobalRgb !== null)
      ? GetGlobalRgbResponse.fromPartial(object.getGlobalRgb)
      : undefined;
    message.getLayerRgb = (object.getLayerRgb !== undefined && object.getLayerRgb !== null)
      ? GetLayerRgbResponse.fromPartial(object.getLayerRgb)
      : undefined;
    message.setLayerRgb = (object.setLayerRgb !== undefined && object.setLayerRgb !== null)
      ? SetLayerRgbResponse.fromPartial(object.setLayerRgb)
      : undefined;
    message.clearLayerRgb = (object.clearLayerRgb !== undefined && object.clearLayerRgb !== null)
      ? ClearLayerRgbResponse.fromPartial(object.clearLayerRgb)
      : undefined;
    message.error = object.error ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
