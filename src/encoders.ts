// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: encoders.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BehaviorBinding } from "./keymap";

export const protobufPackage = "zmk.encoders";

export interface Request {
  /** presence-only */
  getInfo?: boolean | undefined;
  getMapping?: GetMappingRequest | undefined;
  setMapping?: SetMappingRequest | undefined;
  clearMapping?: ClearMappingRequest | undefined;
}

export interface Response {
  getInfo?:
    | GetInfoResponse
    | undefined;
  /**
   * set_mapping and clear_mapping return ZMK_RPC_NO_RESPONSE (meta.no_response = true)
   * No explicit response fields needed
   */
  getMapping?: GetMappingResponse | undefined;
}

export interface GetInfoResponse {
  numLayers: number;
  numSensors: number;
}

export interface GetMappingRequest {
  layerId: number;
  sensorIndex: number;
}

export interface GetMappingResponse {
  cw?: BehaviorBinding | undefined;
  ccw?: BehaviorBinding | undefined;
}

export interface SetMappingRequest {
  layerId: number;
  sensorIndex: number;
  cw?: BehaviorBinding | undefined;
  ccw?: BehaviorBinding | undefined;
}

export interface ClearMappingRequest {
  layerId: number;
  sensorIndex: number;
}

function createBaseRequest(): Request {
  return { getInfo: undefined, getMapping: undefined, setMapping: undefined, clearMapping: undefined };
}

export const Request: MessageFns<Request> = {
  encode(message: Request, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getInfo !== undefined) {
      writer.uint32(8).bool(message.getInfo);
    }
    if (message.getMapping !== undefined) {
      GetMappingRequest.encode(message.getMapping, writer.uint32(18).fork()).join();
    }
    if (message.setMapping !== undefined) {
      SetMappingRequest.encode(message.setMapping, writer.uint32(26).fork()).join();
    }
    if (message.clearMapping !== undefined) {
      ClearMappingRequest.encode(message.clearMapping, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Request {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.getInfo = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getMapping = GetMappingRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.setMapping = SetMappingRequest.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clearMapping = ClearMappingRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Request {
    return {
      getInfo: isSet(object.getInfo) ? globalThis.Boolean(object.getInfo) : undefined,
      getMapping: isSet(object.getMapping) ? GetMappingRequest.fromJSON(object.getMapping) : undefined,
      setMapping: isSet(object.setMapping) ? SetMappingRequest.fromJSON(object.setMapping) : undefined,
      clearMapping: isSet(object.clearMapping) ? ClearMappingRequest.fromJSON(object.clearMapping) : undefined,
    };
  },

  toJSON(message: Request): unknown {
    const obj: any = {};
    if (message.getInfo !== undefined) {
      obj.getInfo = message.getInfo;
    }
    if (message.getMapping !== undefined) {
      obj.getMapping = GetMappingRequest.toJSON(message.getMapping);
    }
    if (message.setMapping !== undefined) {
      obj.setMapping = SetMappingRequest.toJSON(message.setMapping);
    }
    if (message.clearMapping !== undefined) {
      obj.clearMapping = ClearMappingRequest.toJSON(message.clearMapping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Request>, I>>(base?: I): Request {
    return Request.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Request>, I>>(object: I): Request {
    const message = createBaseRequest();
    message.getInfo = object.getInfo ?? undefined;
    message.getMapping = (object.getMapping !== undefined && object.getMapping !== null)
      ? GetMappingRequest.fromPartial(object.getMapping)
      : undefined;
    message.setMapping = (object.setMapping !== undefined && object.setMapping !== null)
      ? SetMappingRequest.fromPartial(object.setMapping)
      : undefined;
    message.clearMapping = (object.clearMapping !== undefined && object.clearMapping !== null)
      ? ClearMappingRequest.fromPartial(object.clearMapping)
      : undefined;
    return message;
  },
};

function createBaseResponse(): Response {
  return { getInfo: undefined, getMapping: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.getInfo !== undefined) {
      GetInfoResponse.encode(message.getInfo, writer.uint32(10).fork()).join();
    }
    if (message.getMapping !== undefined) {
      GetMappingResponse.encode(message.getMapping, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.getInfo = GetInfoResponse.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.getMapping = GetMappingResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      getInfo: isSet(object.getInfo) ? GetInfoResponse.fromJSON(object.getInfo) : undefined,
      getMapping: isSet(object.getMapping) ? GetMappingResponse.fromJSON(object.getMapping) : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.getInfo !== undefined) {
      obj.getInfo = GetInfoResponse.toJSON(message.getInfo);
    }
    if (message.getMapping !== undefined) {
      obj.getMapping = GetMappingResponse.toJSON(message.getMapping);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Response>, I>>(base?: I): Response {
    return Response.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Response>, I>>(object: I): Response {
    const message = createBaseResponse();
    message.getInfo = (object.getInfo !== undefined && object.getInfo !== null)
      ? GetInfoResponse.fromPartial(object.getInfo)
      : undefined;
    message.getMapping = (object.getMapping !== undefined && object.getMapping !== null)
      ? GetMappingResponse.fromPartial(object.getMapping)
      : undefined;
    return message;
  },
};

function createBaseGetInfoResponse(): GetInfoResponse {
  return { numLayers: 0, numSensors: 0 };
}

export const GetInfoResponse: MessageFns<GetInfoResponse> = {
  encode(message: GetInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numLayers !== 0) {
      writer.uint32(8).uint32(message.numLayers);
    }
    if (message.numSensors !== 0) {
      writer.uint32(16).uint32(message.numSensors);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numLayers = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numSensors = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetInfoResponse {
    return {
      numLayers: isSet(object.numLayers) ? globalThis.Number(object.numLayers) : 0,
      numSensors: isSet(object.numSensors) ? globalThis.Number(object.numSensors) : 0,
    };
  },

  toJSON(message: GetInfoResponse): unknown {
    const obj: any = {};
    if (message.numLayers !== 0) {
      obj.numLayers = Math.round(message.numLayers);
    }
    if (message.numSensors !== 0) {
      obj.numSensors = Math.round(message.numSensors);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetInfoResponse>, I>>(base?: I): GetInfoResponse {
    return GetInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetInfoResponse>, I>>(object: I): GetInfoResponse {
    const message = createBaseGetInfoResponse();
    message.numLayers = object.numLayers ?? 0;
    message.numSensors = object.numSensors ?? 0;
    return message;
  },
};

function createBaseGetMappingRequest(): GetMappingRequest {
  return { layerId: 0, sensorIndex: 0 };
}

export const GetMappingRequest: MessageFns<GetMappingRequest> = {
  encode(message: GetMappingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      writer.uint32(16).uint32(message.sensorIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMappingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sensorIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMappingRequest {
    return {
      layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0,
      sensorIndex: isSet(object.sensorIndex) ? globalThis.Number(object.sensorIndex) : 0,
    };
  },

  toJSON(message: GetMappingRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      obj.sensorIndex = Math.round(message.sensorIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMappingRequest>, I>>(base?: I): GetMappingRequest {
    return GetMappingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMappingRequest>, I>>(object: I): GetMappingRequest {
    const message = createBaseGetMappingRequest();
    message.layerId = object.layerId ?? 0;
    message.sensorIndex = object.sensorIndex ?? 0;
    return message;
  },
};

function createBaseGetMappingResponse(): GetMappingResponse {
  return { cw: undefined, ccw: undefined };
}

export const GetMappingResponse: MessageFns<GetMappingResponse> = {
  encode(message: GetMappingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cw !== undefined) {
      BehaviorBinding.encode(message.cw, writer.uint32(10).fork()).join();
    }
    if (message.ccw !== undefined) {
      BehaviorBinding.encode(message.ccw, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMappingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMappingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cw = BehaviorBinding.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ccw = BehaviorBinding.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMappingResponse {
    return {
      cw: isSet(object.cw) ? BehaviorBinding.fromJSON(object.cw) : undefined,
      ccw: isSet(object.ccw) ? BehaviorBinding.fromJSON(object.ccw) : undefined,
    };
  },

  toJSON(message: GetMappingResponse): unknown {
    const obj: any = {};
    if (message.cw !== undefined) {
      obj.cw = BehaviorBinding.toJSON(message.cw);
    }
    if (message.ccw !== undefined) {
      obj.ccw = BehaviorBinding.toJSON(message.ccw);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMappingResponse>, I>>(base?: I): GetMappingResponse {
    return GetMappingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMappingResponse>, I>>(object: I): GetMappingResponse {
    const message = createBaseGetMappingResponse();
    message.cw = (object.cw !== undefined && object.cw !== null) ? BehaviorBinding.fromPartial(object.cw) : undefined;
    message.ccw = (object.ccw !== undefined && object.ccw !== null)
      ? BehaviorBinding.fromPartial(object.ccw)
      : undefined;
    return message;
  },
};

function createBaseSetMappingRequest(): SetMappingRequest {
  return { layerId: 0, sensorIndex: 0, cw: undefined, ccw: undefined };
}

export const SetMappingRequest: MessageFns<SetMappingRequest> = {
  encode(message: SetMappingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      writer.uint32(16).uint32(message.sensorIndex);
    }
    if (message.cw !== undefined) {
      BehaviorBinding.encode(message.cw, writer.uint32(26).fork()).join();
    }
    if (message.ccw !== undefined) {
      BehaviorBinding.encode(message.ccw, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetMappingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sensorIndex = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cw = BehaviorBinding.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ccw = BehaviorBinding.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetMappingRequest {
    return {
      layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0,
      sensorIndex: isSet(object.sensorIndex) ? globalThis.Number(object.sensorIndex) : 0,
      cw: isSet(object.cw) ? BehaviorBinding.fromJSON(object.cw) : undefined,
      ccw: isSet(object.ccw) ? BehaviorBinding.fromJSON(object.ccw) : undefined,
    };
  },

  toJSON(message: SetMappingRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      obj.sensorIndex = Math.round(message.sensorIndex);
    }
    if (message.cw !== undefined) {
      obj.cw = BehaviorBinding.toJSON(message.cw);
    }
    if (message.ccw !== undefined) {
      obj.ccw = BehaviorBinding.toJSON(message.ccw);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetMappingRequest>, I>>(base?: I): SetMappingRequest {
    return SetMappingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetMappingRequest>, I>>(object: I): SetMappingRequest {
    const message = createBaseSetMappingRequest();
    message.layerId = object.layerId ?? 0;
    message.sensorIndex = object.sensorIndex ?? 0;
    message.cw = (object.cw !== undefined && object.cw !== null) ? BehaviorBinding.fromPartial(object.cw) : undefined;
    message.ccw = (object.ccw !== undefined && object.ccw !== null)
      ? BehaviorBinding.fromPartial(object.ccw)
      : undefined;
    return message;
  },
};

function createBaseClearMappingRequest(): ClearMappingRequest {
  return { layerId: 0, sensorIndex: 0 };
}

export const ClearMappingRequest: MessageFns<ClearMappingRequest> = {
  encode(message: ClearMappingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.layerId !== 0) {
      writer.uint32(8).uint32(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      writer.uint32(16).uint32(message.sensorIndex);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClearMappingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClearMappingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.layerId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sensorIndex = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClearMappingRequest {
    return {
      layerId: isSet(object.layerId) ? globalThis.Number(object.layerId) : 0,
      sensorIndex: isSet(object.sensorIndex) ? globalThis.Number(object.sensorIndex) : 0,
    };
  },

  toJSON(message: ClearMappingRequest): unknown {
    const obj: any = {};
    if (message.layerId !== 0) {
      obj.layerId = Math.round(message.layerId);
    }
    if (message.sensorIndex !== 0) {
      obj.sensorIndex = Math.round(message.sensorIndex);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClearMappingRequest>, I>>(base?: I): ClearMappingRequest {
    return ClearMappingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClearMappingRequest>, I>>(object: I): ClearMappingRequest {
    const message = createBaseClearMappingRequest();
    message.layerId = object.layerId ?? 0;
    message.sensorIndex = object.sensorIndex ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
